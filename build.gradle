buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "maven-publish"

version = project.mod_version as Object
group = project.maven_group as Object // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the "official" mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "official", version: project.minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a user-dev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "debug"

            mods {
                crypticcosmos {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            // Recommended logging data for a user-dev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "debug"

            mods {
                crypticcosmos {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            // Recommended logging data for a user-dev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property("forge.logging.markers", "REGISTRIES")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property("forge.logging.console.level", "debug")

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args("--mod", "crypticcosmos", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"))

            mods {
                crypticcosmos {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir("src/generated/resources") }

repositories {
    maven { url("https://repo.repsy.io/mvn/gandiber/geckolib") }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
    // that the dep is a ForgeGradle "patcher" dependency. And it"s patches will be applied.
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${project.minecraft_version}:3.+")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy("reobfJar")
// However if you are in a multi-project build, dev time needs un-obfuscated jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

import groovy.json.JsonParserType
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    // Will allow gradle.properties version fill inside mods.toml file
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "META-INF/mods.toml"

        // Replace version
        expand "version": project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude "META-INF/mods.toml"
    }


    // Will minify the JSON files of your mod when you build the jar.
    // Helps reduce files size! Minify means it will strip whitespace
    // and turn the JSON files into 1 liners.
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper(type: JsonParserType.LAX).parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println("Minified " + jsonMinified + " json files. Saved " + jsonBytesSaved + " bytes. Took " + (System.currentTimeMillis() - jsonMinifyStart) + "ms.")
    }
}
